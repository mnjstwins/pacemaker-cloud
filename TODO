
Assembly = user defined guest (VM + os)

Deployable = user defined set of assemblies and services

CPE = Clould Policy Engine
      starts and stops DPE's

DPE = Deployable Policy Engine
      controls the services in a customer deployment


Description of the program flow given some different scenarios
==============================================================

Create new deployment
---------------------
1) Cloud management software sends cpe the assembly & service config
   in XML (via QMF). Note very simerlar to what pacemaker PE wants.
2) CPE asks upstart/systemd to start a new DPE.
3) CPE stores the config somewhere (DB or file)
4) CPE waits for the DPE QMF agent to be available, then asks it to
   load the config and managemt the deployment.
5) DPE gathers config + state and sends it to the PE
6) DPE performs the actions (using matahari) as instructed by PE


Destroy deployment
------------------
1) Cloud managemt software tells CPE to destroy a deployment
2) CPE asks upstart/systemd to stop the DPE and deletes the config


DPE dies or gets restarted
--------------------------
1) CPE notices death of CPE and starts a new one
2) CPE waits for the DPE QMF agent to be available, then asks it to
   load the config and managemt the deployment.
3) DPE gathers config + state and sends it to the PE
4) DPE performs the actions (using matahari) as instructed by PE


Assembly Instance misses heartbeat
----------------------------------
1) DPE notices the Assembly has missed a heartbeat.
2) send a QMF event (assembly failure)
3) DPE gathers config + state and sends it to the PE
4) DPE performs the actions (using matahari) as instructed by PE
   (move services to other assemblies)


User modifies the deployment configuration
------------------------------------------
1) Cloud management software sends cpe the assembly & service config
   in XML (via QMF). Note very simerlar to what pacemaker PE wants.
2) CPE sees the DPE is already running.
3) CPE stores the config somewhere (DB or file)
4) CPE then notifys the DPE that the config has changed.
5) DPE gathers config + state and sends it to the PE
6) DPE performs the actions (using matahari) as instructed by PE


User accesses the event log.
---------------------------
1) cloud management software accesses event log
   Since CPE/DPE is only one part of the cloud software the logs
   need to be inserted into a larger picture.
   So we need an API to log important events.



TODOs
=====

CPE
---
c1) extend upstart client code to include stopping a process and
    getting events on failure.
c2) write the code to talk to the dpe (load/unload config)
c3) add systemd support


DPE
---
d1) use persistent storage to load config
d2) link in pacemaker PE
d3) convert given config into PE palatable config
d4) pass config into PE and execute commands
d5) read config and discover state of services/assemblies


TESTS
-----
t1) cover basic use cases
t2) get better coverage as functionality is extended


Common lib
----------
l1) add persistent config storage
        config_get(deployment_name, deployment_uuid)
        config_set(deployment_name, deployment_uuid, new_config)
   (must be persistent)


General
-------
g1) Change QMF code the QMFv2


